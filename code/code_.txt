from kivy.metrics import dp
from kivymd.app import MDApp
from kivymd.uix.datatables import MDDataTable
from kivymd.uix.screen import MDScreen
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton

from db import get_all_info

info_list = get_all_info()


class MDData(MDScreen):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.data_tables = MDDataTable(
            use_pagination=True,
            check=True,
            column_data=[
                ("No.", dp(30)),
                ("Product_name", dp(30)),
                ("Remark", dp(30)),
                ("Type", dp(30)),
                ("Id_Plan", dp(30)),
                ("Datatime", dp(30)),
                ("Some", dp(30)),
                ("Changed_User", dp(30)),
            ],
            # row_data=[
            #       [f"{i + + 1}", "info", "hehe", "Gojo", "0", "Satoro"] for i in range(0, 51) # work with db
            # ],
            row_data=[
                [f"{i + + 1}", info_list[i][0], info_list[i][1],
                info_list[i][2], info_list[i][3], info_list[i][4],
                "Some text", info_list[i][5]] for i in range(len(info_list))

            ]
        )

        self.data_tables.bind(on_check_press=self.on_check_press)
        self.add_widget(self.data_tables)

    def on_row_press(self, instance_table, instance_row):
        pass

    def on_check_press(self, instance_table, current_row):
        self.selected_row_index = int(current_row[0]) - 1
        print(self.selected_row_index)
        self.selected_row = current_row

    def modify_and_highlight_row(self):
        if self.selected_row[4] == '0':
            self.data_tables.row_data[self.selected_row_index][4] = '1'
            print(self.data_tables.row_data[self.selected_row_index])
            self.data_tables.update_row_data(
                instance_data_table=self.data_tables, data=self.data_tables.row_data
            )


class MainApp(MDApp):
    def build(self):
        self.theme_cls.theme_style = "Dark"
        self.theme_cls.primary_palette = "Orange"
        self.root = MDBoxLayout(orientation="vertical", padding="30dp", spacing="24dp")
        self.table_screen = MDData()
        self.root.add_widget(self.table_screen)
        self.change_button = MDRaisedButton(text="Change status", on_release=self.change_status)
        self.root.add_widget(self.change_button)
        return self.root

    def change_status(self, instance_button):
        self.table_screen.modify_and_highlight_row()


if __name__ == '__main__':
    MainApp().run()


def modify_and_highlight_row(self):
    if self.selected_row[4] == '0':
        self.data_tables.row_data[self.selected_row_index][4] = '1'

        print(self.data_tables.row_data[self.selected_row_index])  # индекс таблицы

        self.data_tables.update_row_data(
            instance_data_table=self.data_tables, data=self.data_tables.row_data
        )




WindowManager:
    Authentication:
    MDData:

<Authentication>:
    name: "auth"
    AnchorLayout:
        anchor_x: 'center'
        anchor_y: 'top'
        MDBoxLayout:
            orientation: "vertical"
            size_hint_x: .5
            size_hint_y: .5

            MDLabel:
                text: "Це вікно аунтивікації"
                halign: "center"
                valign: "middle"
            MDTextField:
                id: email_input
                hint_text: 'Введіть email'

            MDTextField:
                id: password_input
                hint_text: 'Введіть свій пароль'

            MDRaisedButton:
                text: "Продовжити"
                on_release: root.switch_to_second_screen(email_input.text, password_input.text)


<MDData>:
    name: "data"


    # MDBoxLayout:
    #     orientation: 'vertical'
    #     padding: '30dp'
    #    spacing: '24dp'

        # MDBoxLayout:
        #     orientation: 'vertical'
        #     padding: '30dp'

    # MDRaisedButton:
    #    text: 'Змінити статус'
    #    on_release: root.change_status(self)





from kivy.metrics import dp
from kivymd.app import MDApp
from kivymd.uix.label import MDLabel
from kivymd.uix.datatables import MDDataTable
from kivymd.uix.button import MDFloatingActionButtonSpeedDial
from kivymd.uix.screen import MDScreen
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton

from db import get_all_info


class Authentication(MDScreen):
    def switch_to_second_screen(self, email, password):
        # Костыль
        email_right = 'a'
        password_right = 'a'
        if email == email_right and password == password_right:
            MDApp.get_running_app().root.current = "data"
        else:
            label = MDLabel(text='Error',  theme_text_color="Error", halign='center', valign='middle', font_size=18)

            self.add_widget(label)


class MDData(MDScreen):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.box_layout = MDBoxLayout(orientation="vertical", padding="10dp", spacing="24dp")
        # self.change_button = MDRaisedButton(text="Змінити статус", on_release=self.change_status)
        data = {
            'Python': 'language-python',
            'PHP': 'language-php',
            'C++': 'language-cpp',
        }
        fab_speed_dial = MDFloatingActionButtonSpeedDial(
            data=data,
            root_button_anim=True,
            size_hint=(.1, .1)
        )

        info_list = get_all_info()
        self.data_tables = MDDataTable(
            use_pagination=True,
            check=True,
            column_data=[
                ("Номер №", dp(30)),
                ("Назва продукту", dp(30)),
                ("Примітка до замовлення", dp(50)),
                ("Одиниця виміру", dp(30)),
                ("Кількість", dp(30)),
                ("Дата замовлення", dp(30)),
                ("Вид", dp(20)),
                ("Статус", dp(20)),
                ("Створювач замовлення", dp(50)),
            ],
            row_data=[
                [
                    f"{i + + 1}",
                    info_list[i][0],
                    info_list[i][1],
                    info_list[i][2],
                    info_list[i][3],
                    info_list[i][4],
                    info_list[i][5],
                    info_list[i][6],
                    info_list[i][7]] for i in range(len(info_list))

            ],
        )

        self.data_tables.bind(on_check_press=self.on_check_press)
        self.box_layout.add_widget(self.data_tables)
        self.box_layout.add_widget(fab_speed_dial)
        # self.box_layout.add_widget(self.change_button)

        self.add_widget(self.box_layout)

    def on_row_press(self, instance_table, instance_row):
        pass

    def on_check_press(self, instance_table, current_row):
        self.selected_row_index = int(current_row[0]) - 1
        print(self.selected_row_index)
        self.selected_row = current_row

    '''
    def modify_and_highlight_row(self):
        data = {
            'Python': 'language-python',
            'PHP': 'language-php',
            'C++': 'language-cpp',
        }
        fab_speed_dial = MDFloatingActionButtonSpeedDial(
            data=data,
            root_button_anim=True
        )
        self.box_layout.add_widget(fab_speed_dial)
        '''

    def change_status(self, instance_button):
        # self.data_tables.modify_and_highlight_row()
    #    self.modify_and_highlight_row()
        pass


class MainApp(MDApp):
    def build(self):
        # self.theme_cls.theme_style = "Dark"
        self.theme_cls.primary_palette = "Orange"


if __name__ == '__main__':
    MainApp().run()


            column_data=[
                ("[size=10]Номер №[/size]", dp(15)),
                ("[size=10]Назва продукту[/size]", dp(15)),
                ("[size=10]Примітка до замовлення[/size]", dp(30)),
                ("[size=10]Одиниця виміру[/size]", dp(15)),
                ("[size=10]Кількість[/size]", dp(15)),
                ("[size=10]Дата замовлення[/size]", dp(15)),
                ("[size=10]Вид[/size]", dp(15)),
                ("[size=10]Статус[/size]", dp(15)),
                ("[size=10]Створювач замовлення[/size]", dp(15)),
            ],
            row_data=[
                [
                    f"[size=10]{i + + 1}[/size]",
                    f'[size=10]{info_list[i][0]}[/size]',  # здесь можна изменять как звет так и розмер текста
                    f'[size=10]{info_list[i][1]}[/size]',
                    f'[size=10]{info_list[i][2]}[/size]',
                    f'[size=10]{info_list[i][3]}[/size]',
                    f'[size=10]{info_list[i][4]}[/size]',
                    f'[size=10]{info_list[i][5]}[/size]',
                    f'[size=10]{info_list[i][6]}[/size]',
                    f'[size=10]{info_list[i][7]}[/size]'] for i in range(len(info_list))

            ],
        )


from kivy.metrics import dp
from kivymd.app import MDApp
from kivymd.uix.label import MDLabel
from kivymd.uix.datatables import MDDataTable
from kivymd.uix.button import MDFloatingActionButtonSpeedDial
from kivymd.uix.screen import MDScreen
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.anchorlayout import MDAnchorLayout
from kivymd.uix.floatlayout import MDFloatLayout

from db import get_all_info


class Authentication(MDScreen):

    anchor_layout = MDAnchorLayout(anchor_x='center', anchor_y='bottom')

    def switch_to_second_screen(self, email, password):
        # Костыль
        email_right = 'a'
        password_right = 'a'
        if email == email_right and password == password_right:
            MDApp.get_running_app().root.current = "data"
        else:
            label = MDLabel(text='Error',  theme_text_color="Error", halign='center', valign='bottom', font_size=18)
            self.anchor_layout.add_widget(label)
            self.add_widget(self.anchor_layout)


class MDData(MDScreen):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        info_list = get_all_info()  # get info from database

        self.box_layout = MDBoxLayout(orientation="vertical", padding="10dp", spacing="24dp")
        # self.change_button = MDRaisedButton(text="Змінити статус", on_release=self.change_status)
        data = {
            '1': 'clock',
            '2': 'dots-horizontal-circle',
            '3': 'check-circle',
        }
        self.fab_speed_dial = MDFloatingActionButtonSpeedDial(
            data=data,
            root_button_anim=True,
            # pos_hint={"center_x": 0.5},
            hint_animation=True,
            size_hint=(.1, .1)
        )

        self.data_tables = MDDataTable(
            use_pagination=True,
            check=True,
            background_color_header="#f0f0f0",
            column_data=[
                ("[size=14]№[/size]", dp(20)),
                ("[size=12]Назва продукту[/size]", dp(20)),
                ("[size=12]Примітка до замовлення[/size]", dp(35)),
                ("[size=12]Одиниця виміру[/size]", dp(20)),
                ("[size=12]Кількість[/size]", dp(20)),
                ("[size=12]Дата замовлення[/size]", dp(20)),
                ("[size=12]Вид[/size]", dp(20)),
                ("[size=12]Статус[/size]", dp(20)),
                ("[size=12]Створювач замовлення[/size]", dp(35)),
            ],
            row_data=[
                [
                    f"{i + + 1}",
                    f'[size=12]{info_list[i][0]}[/size]',  # здесь можна изменять как звет так и розмер текста
                    f'[size=12]{info_list[i][1]}[/size]',
                    f'[size=12]{info_list[i][2]}[/size]',
                    f'[size=12]{info_list[i][3]}[/size]',
                    f'[size=12]{info_list[i][4]}[/size]',
                    f'[size=12]{info_list[i][5]}[/size]',
                    f'[size=12]{info_list[i][6]}[/size]',
                    f'[size=12]{info_list[i][7]}[/size]'] for i in range(len(info_list))

            ],
        )

        self.data_tables.bind(on_check_press=self.on_check_press)
        self.box_layout.add_widget(self.data_tables)
        self.box_layout.add_widget(self.fab_speed_dial)
        # self.box_layout.add_widget(self.change_button)
        self.add_widget(self.box_layout)

    def on_row_press(self, instance_table, instance_row):
        pass

    def on_check_press(self, instance_table, current_row):
        self.selected_row_index = int(current_row[0]) - 1
        print(self.selected_row_index)
        self.selected_row = current_row

    def change_status(self, instance_button):
        pass


class MainApp(MDApp):
    def build(self):
        # self.theme_cls.theme_style = "Dark"
        self.theme_cls.primary_palette = "Orange"


if __name__ == '__main__':
    MainApp().run()



ScreenManager:
    Authentication:
    MDData:

<Authentication>:
    name: "auth"

    MDAnchorLayout:
        anchor_x: 'center'
        anchor_y: 'top'

        MDBoxLayout:
            orientation: 'vertical'
            size_hint_x: 1
            size_hint_y: .4
            MDLabel:
                text: "Вікно аутентифікації"
                theme_text_color: "Secondary"
                halign: "center"

            MDTextField:
                id: email_input
                hint_text: 'Введіть email'
                helper_text_mode: 'persistent'
                required: True
                size_hint: None, None
                size: "200dp", "30dp"
                pos_hint: {"center_x": 0.5, "y": 1}

            MDTextField:
                id: password_input
                hint_text: 'Введіть пароль'
                helper_text_mode: 'on_error'
                required: True
                password: True
                size_hint: None, None
                size: "200dp", "30dp"
                pos_hint: {"center_x": 0.5, "y": 1}

            MDRaisedButton:
                text: "Продовжити"
                size_hint: None, None
                size: "200dp", "40dp"
                pos_hint: {"center_x": 0.5}
                on_release: root.switch_to_second_screen(email_input.text, password_input.text)

<MDData>:
    name: "data"